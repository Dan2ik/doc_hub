import logging
import uuid
import json
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7990174156:AAECQ7djna9rkR8AhZYL37NiL4-JkPu1bi8"
DATA_FILE = "bot_data.json"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def load_data() -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r') as f:
                data = json.load(f)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
            if 'projects' in data:
                for project in data['projects'].values():
                    if 'members' in project:
                        project['members'] = set(project['members'])

            return data
        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON.")
            return {}
    return {}


def save_data(data: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤ –≤ —Å–ø–∏—Å–∫–∏"""
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    data_to_save = {}

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏
    for key, value in data.items():
        if isinstance(value, dict):
            data_to_save[key] = {}
            for sub_key, sub_value in value.items():
                if isinstance(sub_value, set):
                    data_to_save[key][sub_key] = list(sub_value)
                else:
                    data_to_save[key][sub_key] = sub_value
        else:
            data_to_save[key] = value

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(DATA_FILE, 'w') as f:
        json.dump(data_to_save, f, indent=2)


def get_project_id_by_name(bot_data: dict, project_name: str, user_id: int) -> str:
    """–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–ª–µ–Ω—Å—Ç–≤–∞"""
    if 'projects' not in bot_data:
        return None
    for proj_id, project in bot_data['projects'].items():
        if project['name'].lower() == project_name.lower() and user_id in project['members']:
            return proj_id
    return None

def get_project_by_name_owner_only(bot_data: dict, project_name: str, owner_id: int) -> str:
    """–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    if 'projects' not in bot_data:
        return None
    for proj_id, project in bot_data['projects'].items():
        if project['name'].lower() == project_name.lower() and project['owner_id'] == owner_id:
            return proj_id
    return None

async def resolve_user_id(context: CallbackContext, username: str) -> int:
    """–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å username –≤ user_id"""
    if not username.startswith('@'):
        return None

    try:
        # –£–¥–∞–ª—è–µ–º @ –≤ –Ω–∞—á–∞–ª–µ
        username = username[1:]
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await context.bot.get_chat(username)
        return user.id
    except Exception as e:
        logger.warning(f"Failed to resolve username {username}: {e}")
        return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"
        "–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:"
    )

    keyboard = [
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data='show_help')],
        [InlineKeyboardButton("–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data='list_projects')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_html(welcome_message, reply_markup=reply_markup)

async def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    instructions = (
        "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª).\n"
        "2. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üìÇ –ü—Ä–æ–µ–∫—Ç—ã:\n"
        "/newproject <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n"
        "/listprojects - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "/members <–ø—Ä–æ–µ–∫—Ç> - –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "üîÑ –í–µ—Ä—Å–∏–∏:\n"
        "/commit <–ø—Ä–æ–µ–∫—Ç> [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é\n"
        "/versions <–ø—Ä–æ–µ–∫—Ç> - –í—Å–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "/get <–ø—Ä–æ–µ–∫—Ç> [–≤–µ—Ä—Å–∏—è] - –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é\n\n"
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:\n"
        "/addmember <–ø—Ä–æ–µ–∫—Ç> <user> - –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "/removemember <–ø—Ä–æ–µ–∫—Ç> <user> - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n"
        "–î–ª—è –∫–æ–º–∞–Ω–¥ /newproject –∏ /commit —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–æ—Ç—É."
    )

    keyboard = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='new_project')],
        [InlineKeyboardButton("–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data='list_projects')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message is not None:
        await update.message.reply_text(instructions, reply_markup=reply_markup)
    else:
        print("No message found in the update")

async def handle_document(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    context.user_data['last_file_id'] = update.message.document.file_id
    context.user_data['last_file_name'] = update.message.document.file_name
    context.user_data['last_file_caption'] = update.message.caption or ""

    logger.info(
        f"User {user_id} uploaded file {update.message.document.file_name} with id {update.message.document.file_id}")

    keyboard = [
        [
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data='new_project'),
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π", callback_data='commit_project')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–§–∞–π–ª '{update.message.document.file_name}' –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def new_project(update: Update, context: CallbackContext) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
    if update.callback_query:
        await update.callback_query.answer()
        if 'last_file_id' not in context.user_data:
            await update.callback_query.edit_message_text(
                "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç."
            )
            return

        await update.callback_query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:"
        )
        context.user_data['awaiting_project_name'] = True
        context.user_data['action'] = 'new_project'
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    if 'last_file_id' not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /newproject <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞>")
        return

    await _create_project(update, context, " ".join(context.args))

async def _create_project(update: Update, context: CallbackContext, project_name: str) -> None:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id

    if 'projects' not in context.bot_data:
        context.bot_data['projects'] = {}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
    for proj_data in context.bot_data['projects'].values():
        if proj_data['name'].lower() == project_name.lower() and proj_data['owner_id'] == user_id:
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    f"–ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{project_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –≤–∞—Å.")
            else:
                await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{project_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –≤–∞—Å.")
            return

    project_id = str(uuid.uuid4())
    new_version_num = 1

    initial_caption = context.user_data.get(
        'last_file_caption') or f"Initial version by {update.effective_user.full_name}"

    context.bot_data['projects'][project_id] = {
        "name": project_name,
        "owner_id": user_id,
        "members": {str(user_id)},  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
        "versions": [{
            "file_id": context.user_data['last_file_id'],
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "uploader_id": user_id,
            "uploader_name": update.effective_user.full_name,
            "version_num": new_version_num,
            "caption": initial_caption,
            "file_name": context.user_data.get('last_file_name', 'document')
        }],
        "next_version_num": new_version_num + 1
    }

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for key in ['last_file_id', 'last_file_caption', 'last_file_name', 'awaiting_project_name', 'action']:
        if key in context.user_data:
            del context.user_data[key]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    save_data(context.bot_data)

    message_text = f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project_name}' —Å–æ–∑–¥–∞–Ω. –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞."

    if update.callback_query:
        await update.callback_query.edit_message_text(message_text)
    else:
        await update.message.reply_text(message_text)

    logger.info(f"User {user_id} created project '{project_name}' (ID: {project_id})")

async def commit_version(update: Update, context: CallbackContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç"""
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
    if update.callback_query:
        await update.callback_query.answer()
        if 'last_file_id' not in context.user_data:
            await update.callback_query.edit_message_text(
                "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_projects = []
        if 'projects' in context.bot_data:
            for proj_id, project in context.bot_data['projects'].items():
                if user_id in project['members']:
                    user_projects.append(project['name'])

        if not user_projects:
            await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        keyboard = []
        for project in user_projects[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
            keyboard.append([InlineKeyboardButton(project, callback_data=f'commit_to:{project}')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    if 'last_file_id' not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å.")
        return

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /commit <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞> [–æ–ø–∏—Å–∞–Ω–∏–µ]")
        return

    project_name_arg = context.args[0]
    commit_message_from_args = " ".join(context.args[1:])
    commit_message_from_caption = context.user_data.get('last_file_caption')

    commit_message = (
        commit_message_from_args if commit_message_from_args else
        commit_message_from_caption if commit_message_from_caption else
        f"Update by {update.effective_user.full_name}"
    )

    await _add_version_to_project(update, context, project_name_arg, commit_message)

async def _add_version_to_project(update: Update, context: CallbackContext, project_name: str,
                                  commit_message: str) -> None:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç"""
    user_id = update.effective_user.id
    project_id = get_project_id_by_name(context.bot_data, project_name, user_id)

    if not project_id:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        else:
            await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return

    project = context.bot_data['projects'][project_id]

    if str(user_id) not in project['members']:
        if update.callback_query:
            await update.callback_query.edit_message_text(f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'.")
        else:
            await update.message.reply_text(f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'.")
        return

    new_version_num = project["next_version_num"]
    project['versions'].append({
        "file_id": context.user_data['last_file_id'],
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "uploader_id": user_id,
        "uploader_name": update.effective_user.full_name,
        "version_num": new_version_num,
        "caption": commit_message,
        "file_name": context.user_data.get('last_file_name', 'document')
    })
    project["next_version_num"] += 1

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for key in ['last_file_id', 'last_file_caption', 'last_file_name']:
        if key in context.user_data:
            del context.user_data[key]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    save_data(context.bot_data)

    message_text = f"‚úÖ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ({new_version_num}) –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç '{project['name']}'."

    if update.callback_query:
        await update.callback_query.edit_message_text(message_text)
    else:
        await update.message.reply_text(message_text)

    logger.info(f"User {user_id} committed version {new_version_num} to project '{project['name']}' (ID: {project_id})")

async def list_projects(update: Update, context: CallbackContext) -> None:
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
    if update.callback_query:
        await update.callback_query.answer()

    if 'projects' not in context.bot_data or not context.bot_data['projects']:
        message = "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
        if update.callback_query:
            await update.callback_query.edit_message_text(message)
        else:
            await update.message.reply_text(message)
        return

    user_projects = []
    for proj_id, project in context.bot_data['projects'].items():
        if str(user_id) in project['members']:
            role = "üëë" if project['owner_id'] == user_id else "üë•"
            user_projects.append(f"{role} {project['name']} (–≤–µ—Ä—Å–∏–π: {len(project['versions'])})")

    if not user_projects:
        message = "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ."
    else:
        message = "üìÇ –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n\n" + "\n".join(user_projects)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        keyboard = []
        for proj_id, project in context.bot_data['projects'].items():
            if str(user_id) in project['members']:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{project['name']} ({len(project['versions'])})",
                        callback_data=f"project_details:{proj_id}"
                    )
                ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
        return

    if update.callback_query:
        await update.callback_query.edit_message_text(message)
    else:
        await update.message.reply_text(message)

async def list_versions(update: Update, context: CallbackContext) -> None:
    """–°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
    if update.callback_query:
        await update.callback_query.answer()
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data="project_details:{proj_id}"
        try:
            proj_id = update.callback_query.data.split(':')[1]
            project = context.bot_data['projects'].get(proj_id)

            if not project or str(user_id) not in project['members']:
                await update.callback_query.edit_message_text("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return

            response = f"üìö –í–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}':\n\n"
            for ver in reversed(project['versions'][-10:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–µ—Ä—Å–∏–π
                response += (
                    f"üîπ –í–µ—Ä—Å–∏—è {ver['version_num']} ({ver['file_name']})\n"
                    f"   üìÖ {ver['timestamp']}\n"
                    f"   üë§ {ver['uploader_name']}\n"
                    f"   üìù {ver['caption']}\n\n"
                )

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
            keyboard = [
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='list_projects'),
                    InlineKeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é", callback_data=f'get_version:{proj_id}')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(response, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error in list_versions callback: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /versions <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞>")
        return

    project_name = " ".join(context.args)
    project_id = get_project_id_by_name(context.bot_data, project_name, user_id)

    if not project_id:
        await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return

    project = context.bot_data['projects'][project_id]
    if not project['versions']:
        await update.message.reply_text(f"–í –ø—Ä–æ–µ–∫—Ç–µ '{project['name']}' –ø–æ–∫–∞ –Ω–µ—Ç –≤–µ—Ä—Å–∏–π.")
        return

    response = f"–í–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ '{project['name']}':\n"
    for ver in reversed(project['versions']):
        response += (f"  –í–µ—Ä—Å–∏—è {ver['version_num']} ({ver['file_name']}) –æ—Ç {ver['timestamp']}\n"
                     f"    –ó–∞–≥—Ä—É–∑–∏–ª: {ver['uploader_name']}\n"
                     f"    –û–ø–∏—Å–∞–Ω–∏–µ: {ver['caption']}\n"
                     f"    [/get {project['name']} {ver['version_num']}]\n\n")

    if len(response) > 4096:
        response_parts = [response[i:i + 4000] for i in range(0, len(response), 4000)]
        for part in response_parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(response)

async def get_version(update: Update, context: CallbackContext) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
    if update.callback_query:
        await update.callback_query.answer()
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data="get_version:{proj_id}"
        try:
            proj_id = update.callback_query.data.split(':')[1]
            project = context.bot_data['projects'].get(proj_id)

            if not project or str(user_id) not in project['members']:
                await update.callback_query.edit_message_text("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return

            if not project['versions']:
                await update.callback_query.edit_message_text("–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –≤–µ—Ä—Å–∏–π.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
            target_version = project['versions'][-1]

            try:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=target_version['file_id'],
                    caption=(
                        f"üìÇ –ü—Ä–æ–µ–∫—Ç: {project['name']}\n"
                        f"üîπ –í–µ—Ä—Å–∏—è: {target_version['version_num']}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {target_version['caption']}\n"
                        f"üë§ –ê–≤—Ç–æ—Ä: {target_version['uploader_name']}\n"
                        f"üìÖ –î–∞—Ç–∞: {target_version['timestamp']}"
                    )
                )
                logger.info(
                    f"Sent version {target_version['version_num']} of project {project['name']} to user {user_id}")
            except Exception as e:
                logger.error(
                    f"Error sending document for project {proj_id}, version {target_version['version_num']}: {e}")
                await update.callback_query.edit_message_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º."
                )
        except Exception as e:
            logger.error(f"Error in get_version callback: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /get <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞> [–Ω–æ–º–µ—Ä_–≤–µ—Ä—Å–∏–∏]")
        return

    project_name = context.args[0]
    version_to_get = None
    if len(context.args) > 1:
        try:
            version_to_get = int(context.args[1])
        except ValueError:
            await update.message.reply_text("–ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

    project_id = get_project_id_by_name(context.bot_data, project_name, user_id)
    if not project_id:
        await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return

    project = context.bot_data['projects'][project_id]
    if not project['versions']:
        await update.message.reply_text(f"–í –ø—Ä–æ–µ–∫—Ç–µ '{project['name']}' –Ω–µ—Ç –≤–µ—Ä—Å–∏–π.")
        return

    target_version = None
    if version_to_get is None:
        if project['versions']:
            target_version = project['versions'][-1]
    else:
        for ver in project['versions']:
            if ver['version_num'] == version_to_get:
                target_version = ver
                break

    if not target_version:
        await update.message.reply_text(
            f"–í–µ—Ä—Å–∏—è {version_to_get if version_to_get is not None else '—Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º'} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ '{project['name']}'.")
        return

    try:
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=target_version['file_id'],
            caption=(
                f"–ü—Ä–æ–µ–∫—Ç: {project['name']}\n"
                f"–í–µ—Ä—Å–∏—è: {target_version['version_num']}\n"
                f"–§–∞–π–ª: {target_version['file_name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {target_version['caption']}\n"
                f"–û—Ç: {target_version['timestamp']}"
            )
        )
        logger.info(f"Sent version {target_version['version_num']} of project {project['name']} to user {user_id}")
    except Exception as e:
        logger.error(f"Error sending document for project {project_id}, version {target_version['version_num']}: {e}")
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º, –∏–ª–∏ —É –±–æ—Ç–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞–π–ª—É.")

async def add_member(update: Update, context: CallbackContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç"""
    owner_id = update.effective_user.id
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addmember <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞> <user_id –∏–ª–∏ @username>")
        return

    project_name = context.args[0]
    member_identifier = context.args[1]

    project_id = get_project_by_name_owner_only(context.bot_data, project_name, owner_id)
    if not project_id:
        await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
        return

    project = context.bot_data['projects'][project_id]

    member_id_to_add = None

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å username
    if member_identifier.startswith('@'):
        member_id_to_add = await resolve_user_id(context, member_identifier)
        if not member_id_to_add:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
                "2. Username —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n"
                "3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
            return
    else:
        try:
            member_id_to_add = int(member_identifier)
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.")
            return

    if member_id_to_add == owner_id:
        await update.message.reply_text("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
        return

    if str(member_id_to_add) in project['members']:
        await update.message.reply_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member_id_to_add} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'.")
        return

    project['members'].add(str(member_id_to_add))
    save_data(context.bot_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member_id_to_add} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç '{project['name']}'.")
    logger.info(f"User {owner_id} added member {member_id_to_add} to project '{project['name']}'")

    try:
        await context.bot.send_message(
            chat_id=member_id_to_add,
            text=(
                f"üëã –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç '{project['name']}'\n"
                f"–í–ª–∞–¥–µ–ª–µ—Ü: {update.effective_user.full_name}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /listprojects, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã."
            )
        )
    except Exception as e:
        logger.warning(f"Could not notify new member {member_id_to_add} for project {project_id}: {e}")

async def remove_member(update: Update, context: CallbackContext) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
    owner_id = update.effective_user.id
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removemember <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞> <user_id –∏–ª–∏ @username>")
        return

    project_name = context.args[0]
    member_identifier = context.args[1]

    project_id = get_project_by_name_owner_only(context.bot_data, project_name, owner_id)
    if not project_id:
        await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
        return

    project = context.bot_data['projects'][project_id]

    member_id_to_remove = None
    if member_identifier.startswith('@'):
        member_id_to_remove = await resolve_user_id(context, member_identifier)
        if not member_id_to_remove:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π User ID —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return
    else:
        try:
            member_id_to_remove = int(member_identifier)
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            return

    if member_id_to_remove == owner_id:
        await update.message.reply_text(
            "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.")
        return

    if str(member_id_to_remove) not in project['members']:
        await update.message.reply_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member_id_to_remove} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'.")
        return

    project['members'].remove(str(member_id_to_remove))
    save_data(context.bot_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member_id_to_remove} —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'.")
    logger.info(f"User {owner_id} removed member {member_id_to_remove} from project '{project['name']}'")

    try:
        await context.bot.send_message(
            chat_id=member_id_to_remove,
            text=f"–í–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'."
        )
    except Exception as e:
        logger.warning(f"Could not notify removed member {member_id_to_remove} for project {project_id}: {e}")

async def list_members(update: Update, context: CallbackContext) -> None:
    """–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /members <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞>")
        return

    project_name = " ".join(context.args)
    project_id = get_project_id_by_name(context.bot_data, project_name, user_id)

    if not project_id:
        await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return

    project = context.bot_data['projects'][project_id]
    members_list_str = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}':\n\n"

    member_details = []
    for member_id_in_set in project['members']:
        prefix = "üëë –í–ª–∞–¥–µ–ª–µ—Ü: " if member_id_in_set == str(project['owner_id']) else "üë§ –£—á–∞—Å—Ç–Ω–∏–∫: "
        member_name = f"ID: {member_id_in_set}"

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
        for ver in project['versions']:
            if str(ver['uploader_id']) == member_id_in_set:
                member_name = f"{ver['uploader_name']} (ID: {member_id_in_set})"
                break

        member_details.append(f"{prefix}{member_name}")

    if not member_details:
        members_list_str += "–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    else:
        members_list_str += "\n".join(sorted(member_details))

    await update.message.reply_text(members_list_str)

async def handle_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞)"""
    user_id = update.effective_user.id

    if 'awaiting_project_name' in context.user_data and context.user_data['awaiting_project_name']:
        action = context.user_data.get('action')

        if action == 'new_project':
            await _create_project(update, context, update.message.text)
        elif action == 'commit_project':
            await _add_version_to_project(update, context, update.message.text, "")

        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏
        context.user_data.pop('awaiting_project_name', None)
        context.user_data.pop('action', None)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    return

async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == 'show_help':
        await help_command(update, context)
    elif data == 'list_projects':
        await list_projects(update, context)
    elif data == 'new_project':
        await new_project(update, context)
    elif data == 'commit_project':
        await commit_version(update, context)
    elif data.startswith('project_details:'):
        await list_versions(update, context)
    elif data.startswith('get_version:'):
        await get_version(update, context)
    elif data.startswith('commit_to:'):
        project_name = data.split(':')[1]
        await _add_version_to_project(update, context, project_name, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    bot_data = load_data()

    application = Application.builder().token(BOT_TOKEN).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    application.bot_data.update(bot_data)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("newproject", new_project))
    application.add_handler(CommandHandler("commit", commit_version))
    application.add_handler(CommandHandler("listprojects", list_projects))
    application.add_handler(CommandHandler("versions", list_versions))
    application.add_handler(CommandHandler("get", get_version))
    application.add_handler(CommandHandler("addmember", add_member))
    application.add_handler(CommandHandler("removemember", remove_member))
    application.add_handler(CommandHandler("members", list_members))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("Bot started...")
    application.run_polling()

if __name__ == '__main__':
    main()
