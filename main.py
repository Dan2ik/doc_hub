import logging
import uuid
import json
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –Ω–µ —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω
BOT_TOKEN = "7990174156:AAECQ7djna9rkR8AhZYL37NiL4-JkPu1bi8" # –°–∫—Ä—ã–ª —Ç–æ–∫–µ–Ω –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

DATA_FILE = "bot_data.json"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def load_data() -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r') as f:
                data = json.load(f)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
            if 'projects' in data:
                for project in data['projects'].values():
                    if 'members' in project and isinstance(project['members'], list):
                        project['members'] = set(project['members'])
                    elif 'members' not in project: # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ members –µ—Å—Ç—å
                         project['members'] = set()


            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ owner_id —è–≤–ª—è–µ—Ç—Å—è int (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –∫–∞–∫ str)
            if 'projects' in data:
                 for project in data['projects'].values():
                     if isinstance(project.get('owner_id'), str):
                         try:
                             project['owner_id'] = int(project['owner_id'])
                         except ValueError:
                             logger.warning(f"Could not convert owner_id {project['owner_id']} to int for project {project.get('name')}")


            return data
        except json.JSONDecodeError as e:
            logger.error(f"Error decoding JSON from data file: {e}")
            return {}
        except Exception as e:
            logger.error(f"Error loading data file: {e}")
            return {}
    return {}

def save_data(data: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤ –≤ —Å–ø–∏—Å–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    def default_serializer(obj):
        if isinstance(obj, set):
            return list(obj)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É int –¥–ª—è owner_id –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è int –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è
        # if isinstance(obj, int):
        #    return obj
        # uuid.UUID —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è default
        raise TypeError(f"Object of type {type(obj)} is not JSON serializable")

    try:
        with open(DATA_FILE, 'w') as f:
            json.dump(data, f, indent=2) # –£–±—Ä–∞–ª default_serializer, —Ç.–∫. int –∏ str –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è, set –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    except Exception as e:
        logger.error(f"Error saving data: {e}")
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ç—É—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

def get_project_id_by_name(bot_data: dict, project_name: str, user_id: int) -> str:
    """–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–ª–µ–Ω—Å—Ç–≤–∞"""
    if 'projects' not in bot_data:
        return None
    user_id_str = str(user_id) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —á–ª–µ–Ω–∞–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    for proj_id, project in bot_data['projects'].items():
        if project['name'].lower() == project_name.lower() and user_id_str in project.get('members', set()): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ members
            return proj_id
    return None

def get_project_by_name_owner_only(bot_data: dict, project_name: str, owner_id: int) -> str:
    """–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    if 'projects' not in bot_data:
        return None
    for proj_id, project in bot_data['projects'].items():
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ owner_id –≤ –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        stored_owner_id = project.get('owner_id')
        if isinstance(stored_owner_id, str):
             try:
                 stored_owner_id = int(stored_owner_id)
             except ValueError:
                 stored_owner_id = None # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        if project['name'].lower() == project_name.lower() and stored_owner_id == owner_id:
            return proj_id
    return None


async def resolve_user_id(context: CallbackContext, username: str) -> int | None:
    """–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å username –≤ user_id"""
    if not username or not isinstance(username, str) or not username.startswith('@'):
        logger.warning(f"Invalid username format: {username}")
        return None

    username = username[1:] # –£–¥–∞–ª—è–µ–º @
    logger.info(f"Trying to resolve username: @{username}")

    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å chat (—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–∏—Å–∞–ª –±–æ—Ç—É)
        user = await context.bot.get_chat(f"@{username}")
        logger.info(f"Successfully resolved @{username} to ID {user.id} via get_chat")
        return user.id
    except Exception as e:
        logger.warning(f"get_chat failed for @{username}: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã (get_user_profile_photos –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID)
        # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    logger.warning(f"Could not resolve username @{username} to a user ID.")
    return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    username = f"@{user.username}" if user.username else "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω"

    welcome_message = (
        f"üîç <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üÜî <b>ID:</b> <code>{user.id}</code>\n"
        f"üë§ <b>Username:</b> {username}\n"
        f"üìõ <b>–ò–º—è:</b> {user.full_name}\n\n"
        "üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n\n"
        "1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª).\n"
        "2. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "<b>üìÇ –ü—Ä–æ–µ–∫—Ç—ã:</b>\n"
        "/newproject <code>–Ω–∞–∑–≤–∞–Ω–∏–µ</code> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n"
        "/listprojects - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "/members <code>–ø—Ä–æ–µ–∫—Ç</code> - –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "<b>üîÑ –í–µ—Ä—Å–∏–∏:</b>\n"
        "/commit <code>–ø—Ä–æ–µ–∫—Ç</code> [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é\n"
        "/versions <code>–ø—Ä–æ–µ–∫—Ç</code> - –í—Å–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "/get <code>–ø—Ä–æ–µ–∫—Ç</code> [–≤–µ—Ä—Å–∏—è] - –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é\n\n"
        "<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:</b>\n"
        "/addmember <code>–ø—Ä–æ–µ–∫—Ç</code> <code>user</code> - –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "/removemember <code>–ø—Ä–æ–µ–∫—Ç</code> <code>user</code> - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n"
        "–î–ª—è –∫–æ–º–∞–Ω–¥ /newproject –∏ /commit —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–æ—Ç—É.\n\n"
    )
    keyboard = [
        [InlineKeyboardButton("–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data='list_projects')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_html(welcome_message, reply_markup=reply_markup)

async def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help, –Ω–µ –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é" –∏–∑ /start
    logger.info("Handling /help command")
    instructions = (
        "üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n\n"
        "1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª).\n"
        "2. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "<b>üìÇ –ü—Ä–æ–µ–∫—Ç—ã:</b>\n"
        "/newproject <code>–Ω–∞–∑–≤–∞–Ω–∏–µ</code> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n"  # <- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        "/listprojects - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "/members <code>–ø—Ä–æ–µ–∫—Ç</code> - –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞\n\n"  # <- –ò –∑–¥–µ—Å—å
        "<b>üîÑ –í–µ—Ä—Å–∏–∏:</b>\n"
        "/commit <code>–ø—Ä–æ–µ–∫—Ç</code> –æ–ø–∏—Å–∞–Ω–∏–µ - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é\n"
        "/versions <code>–ø—Ä–æ–µ–∫—Ç</code> - –í—Å–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "/get <code>–ø—Ä–æ–µ–∫—Ç</code> –≤–µ—Ä—Å–∏—è - –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é\n\n"
        "<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:</b>\n"
        "/addmember <code>–ø—Ä–æ–µ–∫—Ç</code> <code>user</code> - –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "/removemember <code>–ø—Ä–æ–µ–∫—Ç</code> <code>user</code> - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n"
        "–î–ª—è –∫–æ–º–∞–Ω–¥ /newproject –∏ /commit —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–æ—Ç—É.\n\n"
    )

    keyboard = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='new_project')],
        [InlineKeyboardButton("–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data='list_projects')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ö–æ–º–∞–Ω–¥–∞ /help –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∞ update.message is not None –Ω–µ –Ω—É–∂–Ω–∞
    await update.message.reply_html(instructions, reply_markup=reply_markup) # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_html

async def handle_document(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    context.user_data['last_file_id'] = update.message.document.file_id
    context.user_data['last_file_name'] = update.message.document.file_name
    context.user_data['last_file_caption'] = update.message.caption or ""

    logger.info(
        f"User {user_id} uploaded file {update.message.document.file_name} with id {update.message.document.file_id}")

    keyboard = [
        [
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data='new_project'),
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π", callback_data='commit_project') # –ò–∑–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–π
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–§–∞–π–ª '{update.message.document.file_name}' –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def new_project(update: Update, context: CallbackContext) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /newproject"""
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /newproject
    if update.message:
        if 'last_file_id' not in context.user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.")
            return

        if not context.args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /newproject <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞>")
            return

        project_name = " ".join(context.args)
        await _create_project(update, context, project_name)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback 'new_project' –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ button_handler

async def _create_project(update: Update, context: CallbackContext, project_name: str) -> None:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ"""
    try:
        user = update.effective_user # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ update
        user_id = user.id

        if not project_name or project_name.strip() == "":
            if update.callback_query:
                await update.callback_query.edit_message_text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            else:
                await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        if 'projects' not in context.bot_data:
            context.bot_data['projects'] = {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for proj_data in context.bot_data['projects'].values():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ owner_id –µ—Å—Ç—å –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
            stored_owner_id = proj_data.get('owner_id')
            if isinstance(stored_owner_id, str):
                 try:
                      stored_owner_id = int(stored_owner_id)
                 except ValueError:
                      stored_owner_id = None

            if proj_data['name'].lower() == project_name.lower() and stored_owner_id == user_id:
                message = f"–ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{project_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –≤–∞—Å."
                if update.callback_query:
                    await update.callback_query.edit_message_text(message)
                else:
                    await update.message.reply_text(message)
                return

        project_id = str(uuid.uuid4())
        new_version_num = 1

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ last_file_id –¥–æ—Å—Ç—É–ø–µ–Ω
        last_file_id = context.user_data.get('last_file_id')
        last_file_name = context.user_data.get('last_file_name', 'document')
        last_file_caption = context.user_data.get('last_file_caption') or f"Initial version by {user.full_name}"

        if not last_file_id:
            message = "–û—à–∏–±–∫–∞: –§–∞–π–ª –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            if update.callback_query:
                 await update.callback_query.edit_message_text(message)
            else:
                 await update.message.reply_text(message)
            return


        context.bot_data['projects'][project_id] = {
            "name": project_name,
            "owner_id": user_id, # owner_id —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ int
            "members": {str(user_id)}, # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ
            "versions": [{
                "file_id": last_file_id,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "uploader_id": user_id,
                "uploader_name": user.full_name,
                "version_num": new_version_num,
                "caption": last_file_caption,
                "file_name": last_file_name
            }],
            "next_version_num": new_version_num + 1
        }

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        for key in ['last_file_id', 'last_file_caption', 'last_file_name', 'awaiting_project_name', 'action']:
            if key in context.user_data:
                del context.user_data[key]

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        save_data(context.bot_data)

        message_text = f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project_name}' —Å–æ–∑–¥–∞–Ω. –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—É–¥–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª —Ç—Ä–∏–≥–≥–µ—Ä (callback –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞)
        if update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        else:
            await update.message.reply_text(message_text)

        logger.info(f"User {user_id} created project '{project_name}' (ID: {project_id})")
    except Exception as e:
        logger.error(f"Error creating project: {e}", exc_info=True)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç—É–¥–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª —Ç—Ä–∏–≥–≥–µ—Ä
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.callback_query:
             try: await update.callback_query.edit_message_text(error_message)
             except Exception: pass # –ò–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–∫–∏
        elif update.message:
             try: await update.message.reply_text(error_message)
             except Exception: pass


async def commit_version(update: Update, context: CallbackContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /commit"""
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /commit
    if update.message:
        if 'last_file_id' not in context.user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å.")
            return

        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /commit <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞> [–æ–ø–∏—Å–∞–Ω–∏–µ]")
            return

        project_name_arg = context.args[0]
        commit_message_from_args = " ".join(context.args[1:])
        commit_message_from_caption = context.user_data.get('last_file_caption')

        commit_message = (
            commit_message_from_args if commit_message_from_args else
            commit_message_from_caption if commit_message_from_caption else
            f"Update by {update.effective_user.full_name}"
        )

        await _add_version_to_project(update, context, project_name_arg, commit_message)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback 'commit_project' –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ button_handler


async def _add_version_to_project(update: Update, context: CallbackContext, project_name: str,
                                  commit_message: str) -> None:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ"""
    user = update.effective_user
    user_id = user.id
    user_id_str = str(user_id)

    project_id = get_project_id_by_name(context.bot_data, project_name, user_id)

    if not project_id:
        message = f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞."
        if update.callback_query:
             await update.callback_query.edit_message_text(message)
        else:
             await update.message.reply_text(message)
        return

    project = context.bot_data['projects'][project_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ (—Ö–æ—Ç—è get_project_id_by_name —É–∂–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç, –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏)
    if user_id_str not in project.get('members', set()):
        message = f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'.1" # –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–∏—Ñ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if update.callback_query:
             await update.callback_query.edit_message_text(message)
        else:
             await update.message.reply_text(message)
        return

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ last_file_id –¥–æ—Å—Ç—É–ø–µ–Ω
    last_file_id = context.user_data.get('last_file_id')
    last_file_name = context.user_data.get('last_file_name', 'document')
    # –ï—Å–ª–∏ commit_message –ø—É—Å—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ caption –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã), –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    commit_message = commit_message or f"Update by {user.full_name}"


    if not last_file_id:
        message = "–û—à–∏–±–∫–∞: –§–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        if update.callback_query:
             await update.callback_query.edit_message_text(message)
        else:
             await update.message.reply_text(message)
        return


    new_version_num = project.get("next_version_num", 1) # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ next_version_num –µ—Å—Ç—å
    if not isinstance(new_version_num, int): # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
         new_version_num = 1
         if project['versions']:
             try:
                 new_version_num = project['versions'][-1]['version_num'] + 1
             except (TypeError, KeyError):
                 new_version_num = 1


    project['versions'].append({
        "file_id": last_file_id,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "uploader_id": user_id,
        "uploader_name": user.full_name,
        "version_num": new_version_num,
        "caption": commit_message,
        "file_name": last_file_name
    })
    project["next_version_num"] = new_version_num + 1

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    for key in ['last_file_id', 'last_file_caption', 'last_file_name', 'awaiting_project_name', 'action']:
        if key in context.user_data:
            del context.user_data[key]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    save_data(context.bot_data)

    message_text = f"‚úÖ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ({new_version_num}) –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç '{project['name']}'."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—É–¥–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª —Ç—Ä–∏–≥–≥–µ—Ä (callback –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞)
    if update.callback_query:
         await update.callback_query.edit_message_text(message_text)
    else:
         await update.message.reply_text(message_text)

    logger.info(f"User {user_id} committed version {new_version_num} to project '{project['name']}' (ID: {project_id})")


async def list_projects(update: Update, context: CallbackContext) -> None:
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_id_str = str(user_id)

    # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
    if update.callback_query:
        await update.callback_query.answer()

    if 'projects' not in context.bot_data or not context.bot_data['projects']:
        message = "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
        if update.callback_query:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            try:
                 await update.callback_query.edit_message_text(message)
            except Exception:
                 await context.bot.send_message(chat_id=update.effective_chat.id, text=message) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        else:
            await update.message.reply_text(message)
        return

    user_projects = []
    project_buttons = []
    for proj_id, project in context.bot_data['projects'].items():
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ 'members' —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º
        members_set = project.get('members', set())
        if not isinstance(members_set, set):
            members_set = set(members_set) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            project['members'] = members_set # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–æ

        if user_id_str in members_set:
            role = "üëë" if project.get('owner_id') == user_id else "üë•" # –ü—Ä–æ–≤–µ—Ä–∫–∞ owner_id
            user_projects.append(f"{role} {project['name']} (–≤–µ—Ä—Å–∏–π: {len(project.get('versions', []))})") # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ versions
            project_buttons.append([
                 InlineKeyboardButton(
                     f"{project['name']} ({len(project.get('versions', []))})",
                     callback_data=f"project_details:{proj_id}" # –ü–µ—Ä–µ–¥–∞–µ–º proj_id
                 )
            ])


    if not user_projects:
        message = "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ."
        if update.callback_query:
             try: await update.callback_query.edit_message_text(message)
             except Exception: await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
        else:
             await update.message.reply_text(message)
    else:
        message = "üìÇ –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n\n" + "\n".join(user_projects)
        reply_markup = InlineKeyboardMarkup(project_buttons)

        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Failed to edit message in list_projects callback: {e}")
                await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)


async def list_versions(update: Update, context: CallbackContext) -> None:
    """–°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –ø—Ä–æ–µ–∫—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /versions –∏ callback project_details:"""
    user_id = update.effective_user.id
    user_id_str = str(user_id)
    proj_id = None
    project_name = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å: –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞
    if update.callback_query:
        await update.callback_query.answer()
        try:
            # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data="project_details:{proj_id}"
            data_parts = update.callback_query.data.split(':')
            if len(data_parts) > 1:
                proj_id = data_parts[1]
        except Exception as e:
            logger.error(f"Error parsing proj_id from callback data: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            return
    elif update.message:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /versions
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /versions <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞>")
            return
        project_name = " ".join(context.args)
        proj_id = get_project_id_by_name(context.bot_data, project_name, user_id)
    else:
         # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
         logger.warning("list_versions called with unexpected update type")
         return

    if not proj_id:
        message = f"–ü—Ä–æ–µ–∫—Ç '{project_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞."
        if update.callback_query:
             try: await update.callback_query.edit_message_text(message)
             except Exception: await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
        else:
             await update.message.reply_text(message)
        return

    project = context.bot_data['projects'].get(proj_id)

    if not project or user_id_str not in project.get('members', set()):
        message = "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."
        if update.callback_query:
             try: await update.callback_query.edit_message_text(message)
             except Exception: await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
        else:
             await update.message.reply_text(message)
        return


    if not project.get('versions'):
        message = f"–í –ø—Ä–æ–µ–∫—Ç–µ '{project.get('name', '??')}' –ø–æ–∫–∞ –Ω–µ—Ç –≤–µ—Ä—Å–∏–π."
        if update.callback_query:
             try: await update.callback_query.edit_message_text(message)
             except Exception: await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
        else:
             await update.message.reply_text(message)
        return

    response = f"üìö –í–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{project.get('name', '??')}':\n\n"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–µ—Ä—Å–∏–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    for ver in reversed(project['versions'][-10:]):
        response += (
            f"üîπ –í–µ—Ä—Å–∏—è {ver.get('version_num', '??')} ({ver.get('file_name', '—Ñ–∞–π–ª')})\n"
            f"   üìÖ {ver.get('timestamp', '??')}\n"
            f"   üë§ {ver.get('uploader_name', '??')}\n"
            f"   üìù {ver.get('caption', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            f"   <code>/get {project.get('name', proj_id)} {ver.get('version_num', '')}</code>\n\n"
        )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è callback)
    reply_markup = None
    if update.callback_query:
        keyboard = [
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data='list_projects'),
                InlineKeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é", callback_data=f'get_version:{proj_id}') # –ü–µ—Ä–µ–¥–∞–µ–º proj_id
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(response, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Failed to edit message in list_versions callback: {e}")
            await context.bot.send_message(chat_id=update.effective_chat.id, text=response, reply_markup=reply_markup, parse_mode='HTML')
    elif update.message:
        if len(response) > 4096: # Telegram message limit
            response_parts = [response[i:i + 4000] for i in range(0, len(response), 4000)] # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            for part in response_parts:
                await update.message.reply_html(part) # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_html
        else:
            await update.message.reply_html(response) # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_html

async def get_version(update: Update, context: CallbackContext) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get –∏ callback get_version:"""
    user_id = update.effective_user.id
    user_id_str = str(user_id)
    proj_id = None
    project_name = None
    version_to_get_num = None # –ò—Å–∫–æ–º—ã–π –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å: –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞
    if update.callback_query:
        await update.callback_query.answer()
        try:
            # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data="get_version:{proj_id}"
            data_parts = update.callback_query.data.split(':')
            if len(data_parts) > 1:
                proj_id = data_parts[1]
            # –î–ª—è callback'–∞ "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é" –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
            version_to_get_num = None
        except Exception as e:
            logger.error(f"Error parsing proj_id from get_version callback: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            return

    elif update.message:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /get
        if len(context.args) < 1:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /get <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞> [–Ω–æ–º–µ—Ä_–≤–µ—Ä—Å–∏–∏]")
            return

        project_name = context.args[0]
        proj_id = get_project_id_by_name(context.bot_data, project_name, user_id)

        if len(context.args) > 1:
            try:
                version_to_get_num = int(context.args[1])
            except ValueError:
                await update.message.reply_text("–ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
        else:
            version_to_get_num = None # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        logger.warning("get_version called with unexpected update type")
        return


    if not proj_id:
        message = f"–ü—Ä–æ–µ–∫—Ç '{project_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞."
        # –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–∏–±–æ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if update.callback_query:
             try: await update.callback_query.edit_message_text(message)
             except Exception: await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
        else:
             await update.message.reply_text(message)
        return


    project = context.bot_data['projects'].get(proj_id)

    if not project or user_id_str not in project.get('members', set()):
        message = "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."
        if update.callback_query:
             try: await update.callback_query.edit_message_text(message)
             except Exception: await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
        else:
             await update.message.reply_text(message)
        return


    if not project.get('versions'):
        message = f"–í –ø—Ä–æ–µ–∫—Ç–µ '{project.get('name', '??')}' –Ω–µ—Ç –≤–µ—Ä—Å–∏–π."
        if update.callback_query:
             try: await update.callback_query.edit_message_text(message)
             except Exception: await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
        else:
             await update.message.reply_text(message)
        return

    target_version = None
    if version_to_get_num is None:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –ø—Ä–∏—à–µ–ª –∫–æ–ª–±—ç–∫ –±–µ–∑ –Ω–æ–º–µ—Ä–∞
        if project['versions']:
            target_version = project['versions'][-1]
    else:
        # –ò—â–µ–º –≤–µ—Ä—Å–∏—é –ø–æ –Ω–æ–º–µ—Ä—É
        for ver in project['versions']:
            if ver.get('version_num') == version_to_get_num:
                target_version = ver
                break

    if not target_version:
        message = f"–í–µ—Ä—Å–∏—è {version_to_get_num if version_to_get_num is not None else '—Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º'} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ '{project.get('name', '??')}'.1"
        if update.callback_query:
             try: await update.callback_query.edit_message_text(message)
             except Exception: await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
        else:
             await update.message.reply_text(message)
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        await context.bot.send_document(
            chat_id=update.effective_chat.id, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            document=target_version['file_id'],
            caption=(
                f"üìÇ –ü—Ä–æ–µ–∫—Ç: {project.get('name', '??')}\n"
                f"üîπ –í–µ—Ä—Å–∏—è: {target_version.get('version_num', '??')}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {target_version.get('caption', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                f"üë§ –ê–≤—Ç–æ—Ä: {target_version.get('uploader_name', '??')}\n"
                f"üìÖ –î–∞—Ç–∞: {target_version.get('timestamp', '??')}"
            )
        )
        logger.info(f"Sent version {target_version.get('version_num', '??')} of project {project.get('name', proj_id)} to user {user_id}")

        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª callback, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
             try:
                 # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ
                 await update.callback_query.edit_message_text(f"üì• –í–µ—Ä—Å–∏—è {target_version.get('version_num', '??')} –ø—Ä–æ–µ–∫—Ç–∞ '{project.get('name', '??')}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
             except Exception as e:
                  logger.warning(f"Failed to edit message after sending file in get_version callback: {e}")


    except Exception as e:
        logger.error(f"Error sending document for project {project.get('name', proj_id)}, version {target_version.get('version_num', '??')}: {e}", exc_info=True)
        error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º, –∏–ª–∏ —É –±–æ—Ç–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞–π–ª—É."
        if update.callback_query:
             try: await update.callback_query.edit_message_text(error_message)
             except Exception: await context.bot.send_message(chat_id=update.effective_chat.id, text=error_message)
        else:
             await update.message.reply_text(error_message)


async def add_member(update: Update, context: CallbackContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç"""
    owner_id = update.effective_user.id

    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addmember <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞> <@username –∏–ª–∏ user_id>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/addmember –ú–æ–π–ü—Ä–æ–µ–∫—Ç @username\n"
            "/addmember –ú–æ–π–ü—Ä–æ–µ–∫—Ç 123456789\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –≤ –¥–∏–∞–ª–æ–≥–µ —Å –Ω–∏–º –∏–ª–∏ –±–æ—Ç–∞ –≤—Ä–æ–¥–µ @userinfobot (—Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–∞–ø–∏—Å–∞–ª @userinfobot)."
        )
        return

    project_name = context.args[0]
    member_identifier = context.args[1].strip()

    # –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü
    project_id = get_project_by_name_owner_only(context.bot_data, project_name, owner_id)
    if not project_id:
        await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
        return

    project = context.bot_data['projects'][project_id]
    member_id_to_add = None

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω username
    if member_identifier.startswith('@'):
        member_id_to_add = await resolve_user_id(context, member_identifier)
        if not member_id_to_add:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username '{member_identifier}'.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É.\n"
                "- –ù–µ–≤–µ—Ä–Ω—ã–π username.\n\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π User ID."
            )
            return

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —á–∏—Å–ª–æ–≤–æ–π ID
    else:
        try:
            member_id_to_add = int(member_identifier)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    if member_id_to_add == owner_id:
        await update.message.reply_text("‚ö†Ô∏è –í—ã —É–∂–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
        return

    member_id_to_add_str = str(member_id_to_add)

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ 'members' —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º
    members_set = project.get('members', set())
    if not isinstance(members_set, set):
        members_set = set(members_set)
        project['members'] = members_set # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    if member_id_to_add_str in members_set:
        await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member_identifier} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    try:
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å chat action –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —á–∞—Ç
        await context.bot.send_chat_action(
            chat_id=member_id_to_add,
            action='typing'
        )
    except Exception as e:
        logger.warning(f"Could not send chat action to user {member_id_to_add}: {e}")
        await update.message.reply_text(
            f"‚ùå –ù–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {member_id_to_add}.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.\n"
            "- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —á–∏—Å–ª–æ–≤–æ–π ID, –∞ –Ω–µ @username).\n\n"
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /start."
        )
        return


    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
    project['members'].add(member_id_to_add_str)
    save_data(context.bot_data)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    success_msg = await update.message.reply_text(
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {member_identifier} (ID: {member_id_to_add})\n"
        f"–≤ –ø—Ä–æ–µ–∫—Ç '{project['name']}'"
    )

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await context.bot.send_message(
            chat_id=member_id_to_add,
            text=(
                f"üìå –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç '{project['name']}'\n"
                f"–í–ª–∞–¥–µ–ª–µ—Ü: {update.effective_user.full_name}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/listprojects - –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã\n"
                f"/versions {project.get('name', '')} - –í–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{project.get('name', '')}'" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
            )
        )
        logger.info(f"Notified user {member_id_to_add} about joining project {project['name']}")
    except Exception as e:
        logger.warning(f"Could not notify newly added member {member_id_to_add} for project {project_id}: {e}")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–± —É—Å–ø–µ—Ö–µ
        await success_msg.reply_text(
            "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ /start."
        )


async def remove_member(update: Update, context: CallbackContext) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
    owner_id = update.effective_user.id
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removemember <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞> <user_id –∏–ª–∏ @username>")
        return

    project_name = context.args[0]
    member_identifier = context.args[1].strip()

    # –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü
    project_id = get_project_by_name_owner_only(context.bot_data, project_name, owner_id)
    if not project_id:
        await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
        return

    project = context.bot_data['projects'][project_id]

    member_id_to_remove = None
    if member_identifier.startswith('@'):
        member_id_to_remove = await resolve_user_id(context, member_identifier)
        if not member_id_to_remove:
            await update.message.reply_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username '{member_identifier}'. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π User ID —É—á–∞—Å—Ç–Ω–∏–∫–∞."
            )
            return
    else:
        try:
            member_id_to_remove = int(member_identifier)
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.")
            return

    if member_id_to_remove == owner_id:
        await update.message.reply_text(
            "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞."
        )
        return

    member_id_to_remove_str = str(member_id_to_remove)

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ 'members' —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º
    members_set = project.get('members', set())
    if not isinstance(members_set, set):
        members_set = set(members_set)
        project['members'] = members_set # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ


    if member_id_to_remove_str not in members_set:
        await update.message.reply_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member_identifier} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'.2" # –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–∏—Ñ—Ä–∞
        )
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    members_set.remove(member_id_to_remove_str) # –£–¥–∞–ª—è–µ–º –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    project['members'] = members_set # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É (—Ö–æ—Ç—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ)

    save_data(context.bot_data) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member_identifier} (ID: {member_id_to_remove}) —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'.")
    logger.info(f"User {owner_id} removed member {member_id_to_remove} from project '{project['name']}'")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await context.bot.send_message(
            chat_id=member_id_to_remove,
            text=f"–í–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'."
        )
    except Exception as e:
        logger.warning(f"Could not notify removed member {member_id_to_remove} for project {project_id}: {e}")


async def list_members(update: Update, context: CallbackContext) -> None:
    """–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    user_id_str = str(user_id)

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /members <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞>")
        return

    project_name = " ".join(context.args)
    project_id = get_project_id_by_name(context.bot_data, project_name, user_id) # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞

    if not project_id:
        await update.message.reply_text(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return

    project = context.bot_data['projects'].get(project_id)

    if not project: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞.")
         return

    members_list_str = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{project.get('name', '??')}':\n\n"

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ 'members' —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º
    members_set = project.get('members', set())
    if not isinstance(members_set, set):
        members_set = set(members_set)
        project['members'] = members_set # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ


    if not members_set:
        members_list_str += "–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    else:
        member_details = []
        # –°–æ–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏—â–∞ –∏—Ö –≤ –≤–µ—Ä—Å–∏—è—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è ID
        for member_id_in_set in sorted(list(members_set)): # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞
            prefix = "üëë –í–ª–∞–¥–µ–ª–µ—Ü: " if member_id_in_set == str(project.get('owner_id')) else "üë§ –£—á–∞—Å—Ç–Ω–∏–∫: " # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å owner_id
            member_name = f"ID: {member_id_in_set}" # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
            uploader_name_found = False
            for ver in project.get('versions', []): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ versions
                if str(ver.get('uploader_id')) == member_id_in_set and ver.get('uploader_name'): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ uploader_id –∏ uploader_name
                    member_name = f"{ver['uploader_name']} (ID: {member_id_in_set})"
                    uploader_name_found = True
                    break # –ù–∞—à–ª–∏ –∏–º—è, –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞

            member_details.append(f"{prefix}{member_name}")

        members_list_str += "\n".join(member_details)

    await update.message.reply_text(members_list_str)


async def handle_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞)"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–ª–∏ –ª–∏ –º—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'awaiting_project_name' in context.user_data and context.user_data['awaiting_project_name']:
        action = context.user_data.get('action')
        project_name = update.message.text.strip()

        if not project_name:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if action == 'new_project':
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            # Update here is a MessageUpdate, so we pass it
            await _create_project(update, context, project_name)
        elif action == 'commit_project':
            # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –±—ã —Ç–∞–∫ –±—ã–ª–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
            # –°–µ–π—á–∞—Å commit_project callback –≤–µ–¥–µ—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∫–Ω–æ–ø–∫–æ–π
            # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –í–í–ï–°–¢–ò –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–æ–º–º–∏—Ç–∞,
            # —Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É commit_project callback
            # –ù–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —ç—Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –Ω—É–∂–Ω–æ.
            # –ï—Å–ª–∏ –≤—Å–µ –∂–µ –Ω—É–∂–Ω–æ, —Ç–æ –ª–æ–≥–∏–∫–∞ –±—ã–ª–∞ –±—ã —Ç–∞–∫–æ–π:
            # await _add_version_to_project(update, context, project_name, "") # Commit message –±—É–¥–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∏–ª–∏ –∏–∑ user_data

            # –í —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ, –µ—Å–ª–∏ user_data['action'] == 'commit_project', —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–æ—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π,
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ commit_project callback
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞.")

        # –§–ª–∞–≥–∏ –æ—á–∏—â–∞—é—Ç—Å—è –≤ _create_project –∏ _add_version_to_project –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è


        return # –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å –¥–∞–ª—å—à–µ

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    # await update.message.reply_text("–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å–µ–π—á–∞—Å –æ–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ñ–∞–π–ª–∞.")
    pass # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer() # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    chat_id = query.message.chat_id
    message_id = query.message.message_id # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    logger.info(f"Received callback query: {query.data} from user {query.from_user.id} in chat {chat_id}")

    data = query.data

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ show_help ---
    if data == 'show_help':
        logger.info("Handling show_help callback data.")
        instructions = (
            "üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n\n"
            "1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª).\n"
            "2. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "<b>üìÇ –ü—Ä–æ–µ–∫—Ç—ã:</b>\n"
            "/newproject <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n" # HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            "/listprojects - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "/members <–ø—Ä–æ–µ–∫—Ç> - –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞\n\n" # HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            "<b>üîÑ –í–µ—Ä—Å–∏–∏:</b>\n"
            "/commit <–ø—Ä–æ–µ–∫—Ç> [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é\n" # HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            "/versions <–ø—Ä–æ–µ–∫—Ç> - –í—Å–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
            "/get <–ø—Ä–æ–µ–∫—Ç> [–≤–µ—Ä—Å–∏—è] - –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é\n\n" # HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            "<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:</b>\n"
            "/addmember <–ø—Ä–æ–µ–∫—Ç> <user> - –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n" # HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            "/removemember <–ø—Ä–æ–µ–∫—Ç> <user> - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n" # HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            "–î–ª—è –∫–æ–º–∞–Ω–¥ /newproject –∏ /commit —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–æ—Ç—É."
        )

        keyboard = [
            [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='new_project')], # callback_data –Ω–µ –º–µ–Ω—è–µ–º, –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ new_project/handle_text
            [InlineKeyboardButton("–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data='list_projects')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.edit_text( # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message.edit_text
                text=instructions,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            logger.info(f"Edited message {message_id} in chat {chat_id} with instructions.")
        except Exception as e:
            logger.error(f"Failed to edit message {message_id} in chat {chat_id} with instructions: {e}", exc_info=True)
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            fallback_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n" + instructions
            try:
                 await context.bot.send_message(
                    chat_id=chat_id,
                    text=fallback_message,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                 )
                 logger.info(f"Sent fallback instructions message to chat {chat_id}.")
            except Exception as send_error:
                 logger.error(f"Failed to send fallback error message to user in chat {chat_id}: {send_error}")


    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ list_projects ---
    elif data == 'list_projects':
        logger.info("Handling list_projects callback data.")
        await list_projects(update, context) # list_projects —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ new_project (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞) ---
    # –õ–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"
    elif data == 'new_project':
        logger.info("Handling new_project callback data.")
        if 'last_file_id' not in context.user_data:
             # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
             try:
                 await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.")
             except Exception as e:
                 logger.warning(f"Failed to edit message for new_project callback (no file): {e}")
                 await context.bot.send_message(chat_id=chat_id, text="–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.")
             return

        # –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        try:
             await query.edit_message_text(
                 "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:"
             )
             # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
             context.user_data['awaiting_project_name'] = True
             context.user_data['action'] = 'new_project'
             logger.info(f"User {query.from_user.id} is now awaiting new project name.")
        except Exception as e:
             logger.error(f"Failed to edit message to ask for project name: {e}", exc_info=True)
             await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")


    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ commit_project (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞) ---
    # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"
    elif data == 'commit_project':
        logger.info("Handling commit_project callback data.")
        if 'last_file_id' not in context.user_data:
             # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
             try:
                  await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å.")
             except Exception as e:
                  logger.warning(f"Failed to edit message for commit_project callback (no file): {e}")
                  await context.bot.send_message(chat_id=chat_id, text="–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å.")
             return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        user_projects_buttons = []
        if 'projects' in context.bot_data:
            for proj_id, project in context.bot_data['projects'].items():
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ 'members' —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º
                members_set = project.get('members', set())
                if not isinstance(members_set, set):
                    members_set = set(members_set)
                    project['members'] = members_set # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

                if str(user_id) in members_set: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞
                    user_projects_buttons.append([
                        InlineKeyboardButton(
                            project.get('name', f'–ü—Ä–æ–µ–∫—Ç ID: {proj_id[:4]}...'), # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –∏–ª–∏ —á–∞—Å—Ç—å ID
                            callback_data=f'commit_to_id:{proj_id}' # –ü–µ—Ä–µ–¥–∞–µ–º proj_id –≤ callback
                        )
                    ])

        if not user_projects_buttons:
            try:
                 await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            except Exception as e:
                 logger.warning(f"Failed to edit message for no projects in commit_project callback: {e}")
                 await context.bot.send_message(chat_id=chat_id, text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ)
        reply_markup = InlineKeyboardMarkup(user_projects_buttons)
        try:
            await query.message.edit_text( # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message.edit_text
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            logger.info(f"Presented project selection for commit to user {user_id}.")
        except Exception as e:
            logger.error(f"Failed to edit message to show project selection for commit: {e}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ project_details: (–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–µ—Ä—Å–∏–π) ---
    elif data.startswith('project_details:'):
        logger.info(f"Handling project_details callback data: {data}")
        # list_versions —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç callback
        await list_versions(update, context)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ get_version: (–ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏) ---
    elif data.startswith('get_version:'):
        logger.info(f"Handling get_version callback data: {data}")
        # get_version —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç callback
        await get_version(update, context)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ commit_to_id: (–≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –ø–æ ID) ---
    elif data.startswith('commit_to_id:'):
        logger.info(f"Handling commit_to_id callback data: {data}")
        try:
            proj_id_to_commit = data.split(':')[1]
            project = context.bot_data['projects'].get(proj_id_to_commit)
            if not project:
                 try: await query.edit_message_text("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                 except Exception: await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                 return

            project_name_to_commit = project.get('name')
            if not project_name_to_commit:
                 try: await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞.")
                 except Exception: await context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞.")
                 return

            # Commit message –±–µ—Ä–µ—Ç—Å—è –∏–∑ user_data –∏–ª–∏ —Å—Ç–∞–≤–∏—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
            commit_message = context.user_data.get('last_file_caption') or f"Update by {query.from_user.full_name}"

            # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
            await _add_version_to_project(update, context, project_name_to_commit, commit_message)

        except Exception as e:
            logger.error(f"Error handling commit_to_id callback: {e}", exc_info=True)
            try: await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏.")
            except Exception: await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏.")


    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback data ---
    else:
        logger.warning(f"Received unhandled callback data: {data}")
        try:
             # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
             await query.message.edit_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        except Exception as e:
             logger.warning(f"Failed to edit message for unknown callback data: {e}")
             try: await context.bot.send_message(chat_id=chat_id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
             except Exception: pass # –ò–∑–±–µ–≥–∞–µ–º –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    bot_data = load_data()

    application = Application.builder().token(BOT_TOKEN).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ bot_data –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–µ–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    application.bot_data.update(bot_data)
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ bot_data –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.bot_data['save_data'] = save_data # –≠—Ç–æ –º–µ–Ω–µ–µ –∏–¥–∏–æ–º–∞—Ç–∏—á–Ω–æ, –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å context.bot_data –≤ save_data

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("newproject", new_project)) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /newproject
    application.add_handler(CommandHandler("commit", commit_version)) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /commit
    application.add_handler(CommandHandler("listprojects", list_projects))
    application.add_handler(CommandHandler("versions", list_versions))
    application.add_handler(CommandHandler("get", get_version))
    application.add_handler(CommandHandler("addmember", add_member))
    application.add_handler(CommandHandler("removemember", remove_member))
    application.add_handler(CommandHandler("members", list_members))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç–µ–∫—Å—Ç)
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    # –í–∞–∂–Ω–æ: —Ñ–∏–ª—å—Ç—Ä TEXT & ~COMMAND –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç, –Ω–µ —è–≤–ª—è—é—â–∏–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π.
    # –í–∞—à handle_text —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.
    # –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("Bot starting...")
    application.run_polling(poll_interval=1.0) # –î–æ–±–∞–≤–ª–µ–Ω poll_interval –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞
    bot_data = load_data() # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–¥–µ—Å—å –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ main

    # –ó–∞–ø—É—Å–∫ main
    main()